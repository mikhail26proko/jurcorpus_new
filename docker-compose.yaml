version: '2.1'

services:

  app-nginx:
    container_name: app-nginx
    build: ./docker/nginx/
    tty: true
    volumes:
      - ./docker/nginx/config/:/etc/nginx/conf.d/
      - ./docker/nginx/logs:/var/log/nginx
      - ./jurcorpus.crt:/etc/ssl/jurcorpus.crt
      - ./jurcorpus.key:/etc/ssl/jurcorpus.key
      - ./ca.crt:/etc/ssl/ca.crt
      - ${PWD:-./}/backend:/var/www
    ports:
      - '80:80'
      - '443:443'
    restart: always
    working_dir: /var/www
    depends_on:
      - app-frontend
      - app-php
    networks:
      - local-network

  app-frontend:
    container_name: app-frontend
    image: node:16.16-alpine
    command: sh -c "yarn install && yarn run dev"
    working_dir: /app/
    volumes:
      - ${PWD:-./}/frontend:/app
      - ${PWD:-./}/.env:/app/.env
    restart: always
    ports:
      - '3000:3000'
    networks:
      - local-network

  app-php:
    container_name: app-php
    build: ./docker/php/
    env_file:
      - ${PWD:-./}/.env
    ports:
      - '9000:9000'
    networks:
      - local-network
    volumes:
      - ${PWD:-./}/backend:/var/www
    depends_on:
      app-postgres:
        condition: service_healthy
    restart: always

  app-postgres:
    container_name: app-postgres
    image: postgres:11.2-alpine
    volumes:
      - app-postgres-data:/var/lib/postgresql/data
      - ${PWD:-./}/pgdumps:/var/www
    ports:
      - '5432:5432'
    networks:
      - local-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U root -d app -p 5432
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

volumes:
  app-postgres-data:

networks:
  local-network:
    driver: bridge