version: '3'

services:

  traefik:
    container_name: ${COMPOSE_PROJECT_NAME}-traefik
    image: traefik:v2.10
    restart: always
    ports:
      - 80:80
      # - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - ${PWD:-./}/logs/traefik:/etc/logs/
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.rule=Host(`dashboard.${DOMAIN1}`)
      - traefik.http.services.traefik.loadBalancer.server.port=8080


  frontend:
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    image: node:16.16-alpine
    command: sh -c "yarn install && yarn run dev"
    working_dir: /app/
    restart: always
    volumes:
      - ${PWD:-./}/frontend:/app
      - ${PWD:-./}/.env:/app/.env
    ports: [3000]
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.http.routers.frontend.service=frontend
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN1}`)
      - traefik.http.services.frontend.loadBalancer.server.port=3000

  nginx:
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    # build: ./docker/nginx/
    image: nginx:1.21-alpine
    # command: sh -c "nginx -g daemon off"
    tty: true
    volumes:
      - ${PWD:-./}/docker/dev/nginx/config:/etc/nginx/conf.d
      - ${PWD:-./}/logs/nginx:/var/log/nginx
      - ${PWD:-./}/backend:/var/www
    ports: [80]
    restart: always
    working_dir: /var/www
    depends_on:
      - backend
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.admin.entrypoints=web
      - traefik.http.routers.nginx.entrypoints=web
      - traefik.http.routers.admin.rule=Host(`admin.${DOMAIN1}`)
      - traefik.http.routers.nginx.rule=Host(`api.${DOMAIN1}`)
      - traefik.http.routers.admin.service=nginx
      - traefik.http.routers.nginx.service=nginx
      - traefik.http.services.admin.loadBalancer.server.port=80
      - traefik.http.services.nginx.loadBalancer.server.port=80

  backend:
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    build: ./php/
    env_file:
      - ${PWD:-./}/.env
    restart: always
    working_dir: /var/www
    ports: [9000]
    networks:
      - traefik-public
    labels:
      - traefik.enable=false
    volumes:
      - ${PWD:-./}/backend:/var/www
      - ${PWD:-./}/logs/backend:/var/www/storage/logs
      - ${PWD:-./}/.env:/var/www/.env

  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    image: postgres:11.2-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    volumes:
      - app-postgres-data:/var/lib/postgresql/data
      - ${PWD:-./}/pgdumps:/var/www
    ports:
      - 5432:5432
    networks:
      - traefik-public
    labels:
      - traefik.enable=false
    healthcheck:
      test: pg_isready -U root -d ${POSTGRES_DB} -p 5432
      interval: 15s
      timeout: 15s
      retries: 10

networks:
  traefik-public:
    driver: bridge

volumes:
  app-postgres-data: